{"version":3,"sources":["GlobalStyle.js","common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/Input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","silver","Wrapper","styled","main","Container","children","Header","title","section","white","header","Title","h2","Body","div","Button","button","teal","Section","body","extraHeaderContent","AuthorPage","input","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","areExampleTasksLoading","reducers","addTask","newTask","payload","push","deleteTask","id","index","findIndex","task","splice","toggleHideDone","state","toggleTaskDone","done","setAllDone","forEach","fetchExampleTasks","setTasks","setAreExampleTasksLoading","selectTasksState","selectTasks","selectHideDone","selectExampleTasksLoading","actions","StyledForm","form","breakpoint","mobileSmall","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","ref","value","placeholder","onChange","target","useQueryParameter","location","useLocation","URLSearchParams","search","get","ul","Task","li","hidden","css","Content","span","ContentLink","Link","black","green","remove","red","TaskList","query","useSelector","filter","toUpperCase","includes","selectTaskByQuery","map","onClick","to","Buttons","length","disabled","every","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","Tasks","TaskPage","useParams","taskId","find","getTaskById","Navbar","NavItem","NavLink","Navigation","App","path","TasksPage","getExampleTasks","a","axios","response","data","console","log","rootSaga","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","all","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","mobileMedium","mobileMax","document","getElementById"],"mappings":"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","file":"static/js/main.e4a1d960.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    font-family: 'Lato', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    background-color: ${({ theme }) => theme.color.silver};\r\n}\r\n`","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Wrapper } from \"./styled\"\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","const Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.white};\r\n    margin: 10px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding: 20px;\r\n    margin: 0;\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    grid-gap: 20px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    margin: 0;\r\n    padding: 0;\r\n    transition: filter 0.3s;\r\n    \r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n        filter: brightness(100%);\r\n        cursor: default;\r\n    }\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nconst AuthorPage = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"O autorze\" />\r\n      <Section\r\n        title=\"Robert Osial\"\r\n        body={<>Lubię się uczyć nowych rzeczy. Hobbistycznie programuję w React.</>}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default AuthorPage;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        areExampleTasksLoading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: newTask }) => {\r\n            tasks.push(newTask);\r\n        },\r\n\r\n        deleteTask: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id)\r\n            tasks.splice(index, 1);\r\n        },\r\n\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks[index].done = !tasks[index].done\r\n        },\r\n\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n        setAreExampleTasksLoading: (state, { payload }) => {\r\n            state.areExampleTasksLoading = payload;\r\n        },\r\n    },\r\n});\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectExampleTasksLoading = state => state.tasks.areExampleTasksLoading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTaskByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport const {\r\n    addTask,\r\n    deleteTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setAreExampleTasksLoading,\r\n} = tasksSlice.actions;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileSmall}px) {\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 0px;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    padding: 10px;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\nF\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"../../Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim()\r\n\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                id: nanoid(),\r\n                done: false,\r\n            }))\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus();\r\n        }\r\n\r\n        return setNewTaskContent(\"\")\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = () => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(\"szukaj\");\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return (value) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(\"szukaj\");\r\n        } else {\r\n            searchParams.set(\"szukaj\", value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Wrapper = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Task = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    padding: 10px;\r\n    align-items: center;\r\n    word-break: break-word;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}  \r\n`;\r\n\r\nexport const ContentLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.black};\r\n\r\n    &:hover {\r\n        filter: brightness(60%);\r\n        color: ${({ theme }) => theme.color.teal}\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    width: 25px;\r\n    height: 25px;\r\n\r\n    ${({ toggleTaskDone }) => toggleTaskDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteTask,\r\n  toggleTaskDone,\r\n  selectHideDone,\r\n  selectTaskByQuery,\r\n} from \"../../tasksSlice\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper, Task, Content, Button, ContentLink } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter();\r\n  const tasks = useSelector(state => selectTaskByQuery(state, query))\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {tasks.map(task => (\r\n        <Task\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleTaskDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✓\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <ContentLink to={`/zadania/${task.id}`}>{task.content}</ContentLink>\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(deleteTask(task.id))}>\r\n            ✗\r\n          </Button>\r\n        </Task>\r\n      ))}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n   display: flex;\r\n   gap: 20px;\r\n   flex-wrap: wrap;\r\n   justify-content: flex-end;\r\n\r\n   @media(max-width: ${({theme}) => theme.breakpoint.mobileSmall}px) {\r\n       gap: 5px;\r\n   }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectHideDone,\r\n  selectTasks,\r\n  toggleHideDone,\r\n  setAllDone\r\n} from \"../../tasksSlice\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { Button } from \"../../../../common/Section/styled\";\r\n\r\nconst Buttons = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={tasks.every(({ done }) => !done)}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`;","import Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter();\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter(target.value !== \"\" ? target.value : undefined);\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Search;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Buttons from \"./Buttons\";\r\nimport { Button } from \"../../../common/Section/styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchExampleTasks, selectExampleTasksLoading } from \"../tasksSlice\"\r\nimport { useSelector } from \"react-redux\";\r\nimport Search from \"./Search\";\r\n\r\nconst Tasks = () => {\r\n  const areExampleTasksLoading = useSelector(selectExampleTasksLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={\r\n          <Button\r\n            onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={areExampleTasksLoading}>\r\n            {areExampleTasksLoading ? \"Ładowanie...\" : \"Pobierz zadania\"}\r\n          </Button>}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      >\r\n      </Section>\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Container from \"../../../common/Container\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nconst TaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"nie ma takiego zadania :(\"}\r\n        body={!!task && (\r\n            <>\r\n            <strong>Ukończone:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n          </>\r\n        )}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nbackground-color: ${({ theme }) => theme.color.teal};\r\n`;\r\n\r\nexport const Navbar = styled.ul`\r\ndisplay: flex;\r\nlist-style-type: none;\r\n`;\r\n\r\nexport const NavItem = styled.li`\r\nmargin-right: 20px;\r\n`;\r\n\r\nexport const NavLink = styled(Link)`\r\ncolor: white;\r\ntext-decoration: none;\r\n\r\n&:focus {\r\n    font-weight: bold;\r\n}\r\n`;","import { Wrapper, Navbar, NavItem, NavLink } from \"./styled\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Navbar>\r\n        <NavItem>\r\n          <NavLink to=\"/zadania\">Zadania</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink to=\"/autor\">o autorze</NavLink>\r\n        </NavItem>\r\n      </Navbar>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage.js\";\r\nimport TasksPage from \"./features/tasks/TasksPage/index.js\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index.js\";\r\nimport Navigation from \"./Navigation/index.js\";\r\n\r\n\r\nconst App = () =>\r\n  <HashRouter>\r\n    <Navigation />\r\n    <Switch>\r\n      <Route path=\"/zadania/:id\">\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path=\"/zadania\">\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path=\"/autor\">\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Redirect to=\"/zadania\" />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n\r\nexport default App;","import axios from \"axios\";\r\n\r\nexport const getExampleTasks = async () => {\r\n    try {\r\n        const response = await axios.get(\"/tasklist-react/exampleTasks.json\");\r\n        return response.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import { call, all, delay, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport {\r\n    setTasks,\r\n    fetchExampleTasks,\r\n    setAreExampleTasksLoading,\r\n    selectTasks\r\n} from \"./tasksSlice\";\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setAreExampleTasksLoading(true));\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n        yield put(setAreExampleTasksLoading(false));\r\n    } catch (error) {\r\n        yield put(setAreExampleTasksLoading(false));\r\n        yield call(alert, \"cos poszło nie tak:(\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler)\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { rootSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        white: \"#fff\",\r\n        silver: \"#ddd\",\r\n        teal: \"#008080\",\r\n        red: \"#cc0000\",\r\n        green: \"#008000\",\r\n    },\r\n\r\n    breakpoint: {\r\n        mobileSmall: 420,\r\n        mobileMedium: 480,\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}