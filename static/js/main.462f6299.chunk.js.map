{"version":3,"sources":["GlobalStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/Tasks.js","App.js","store.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","silver","tasksSlice","createSlice","name","initialState","tasks","content","id","done","hideDone","reducers","addTask","payload","push","deleteTask","index","findIndex","task","splice","toggleHideDone","state","toggleTaskDone","setAllDone","forEach","selectTasks","actions","StyledForm","styled","form","breakpoint","maxMobile","Input","input","Button","button","teal","white","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","ref","value","placeholder","onChange","target","Wrapper","ul","Task","li","hidden","css","Content","span","green","remove","red","TaskList","useSelector","map","onClick","section","Header","header","mobileMax","Title","h2","Body","div","Section","title","body","extraHeaderContent","main","Container","children","Buttons","length","disabled","every","Tasks","App","store","configureStore","reducer","tasksReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"wNAEaA,EAAcC,YAAH,8NAWA,qBAAGC,MAAkBC,MAAMC,U,sBCX7CC,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,MAAO,CAAC,CACJC,QAAS,OACTC,GAAI,QACJC,MAAM,IAEVC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAA6B,IAA1BN,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QACnBP,EAAMQ,KAAKD,IAGfE,WAAY,cAA6B,IAA1BT,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QAChBG,EAAQV,EAAMW,WAAU,SAAAC,GAAI,OAAIA,EAAKV,KAAOK,KAClDP,EAAMa,OAAOH,EAAO,IAGxBI,eAAgB,SAAAC,GACZA,EAAMX,UAAYW,EAAMX,UAG5BY,eAAgB,cAA6B,IAA1BhB,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QACpBG,EAAQV,EAAMW,WAAU,SAAAC,GAAI,OAAIA,EAAKV,KAAOK,KAClDP,EAAMU,GAAOP,MAAQH,EAAMU,GAAOP,MAGtCc,WAAY,YAAe,EAAZjB,MACLkB,SAAQ,SAAAN,GAAI,OAAIA,EAAKT,MAAO,SAKjCgB,EAAc,SAAAJ,GAAK,OAAIA,EAAMf,OACnC,EAMHJ,EAAWwB,QALXd,EADG,EACHA,QACAG,EAFG,EAEHA,WACAK,EAHG,EAGHA,eACAE,EAJG,EAIHA,eACAC,EALG,EAKHA,WAEWrB,IAAf,QC3CayB,EAAaC,IAAOC,KAAV,yLAKA,qBAAG9B,MAAkB+B,WAAWC,aAI1CC,EAAQJ,IAAOK,MAAV,6EAKLC,EAASN,IAAOO,OAAV,kQACK,qBAAGpC,MAAkBC,MAAMoC,QACtC,qBAAGrC,MAAkBC,MAAMqC,S,OCuBzBC,EAnCF,WACT,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAWC,iBAAO,MAClBC,EAAWC,cAoBjB,OACI,eAAClB,EAAD,CAAYmB,SAnBK,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAwBT,EAAeU,OAY7C,MAV8B,KAA1BD,IACAL,EAAShC,EAAQ,CACbL,QAAS0C,EACTzC,GAAI2C,cACJ1C,MAAM,KAEVgC,EAAkB,IAClBC,EAASU,QAAQC,SAGdZ,EAAkB,KAIzB,UACI,cAACT,EAAD,CAAOsB,IAAKZ,EACRa,MAAOf,EACPgB,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBjB,EAAkBiB,EAAOH,UAEvD,cAACrB,EAAD,gCClCCyB,EAAU/B,IAAOgC,GAAV,oFAMPC,EAAOjC,IAAOkC,GAAV,6MAQX,qBAAGC,QAAuBC,YAAJ,uDAKfC,EAAUrC,IAAOsC,KAAV,uCACd,qBAAGzD,MAAmBuD,YAAJ,2EAKX9B,EAASN,IAAOO,OAAV,4QACN,qBAAGpC,MAAkBC,MAAMqC,SAKlC,qBAAGf,gBAAuC0C,YAAJ,0DACtB,qBAAGjE,MAAkBC,MAAMmE,YAG3C,qBAAGC,QAAuBJ,YAAJ,0DACN,qBAAGjE,MAAkBC,MAAMqE,UCHlCC,EA9BE,WACf,MAA4BC,YAAY9C,GAAhCnB,EAAR,EAAQA,MAAOI,EAAf,EAAeA,SACTkC,EAAWC,cAEjB,OACE,cAACc,EAAD,UACGrD,EAAMkE,KAAI,SAAAtD,GAAI,OACb,eAAC2C,EAAD,CAEEE,OAAQ7C,EAAKT,MAAQC,EAFvB,UAIE,cAAC,EAAD,CACEY,gBAAc,EACdmD,QAAS,kBAAM7B,EAAStB,EAAeJ,EAAKV,MAF9C,SAGGU,EAAKT,KAAO,SAAM,KAErB,cAACwD,EAAD,CAASxD,KAAMS,EAAKT,KAApB,SACGS,EAAKX,UAER,cAAC,EAAD,CACE6D,QAAM,EACNK,QAAS,kBAAM7B,EAAS7B,EAAWG,EAAKV,MAF1C,sBAXKU,EAAKV,UCXPmD,EAAU/B,IAAO8C,QAAV,sGACF,qBAAG3E,MAAkBC,MAAMqC,SAKhCsC,EAAS/C,IAAOgD,OAAV,8TASK,qBAAG7E,MAAkB+B,WAAW+C,aAM3CC,EAAQlD,IAAOmD,GAAV,kEAKLC,GAAOpD,IAAOqD,IAAV,gDCdFC,GAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,eAAC,EAAD,WACI,eAAC,EAAD,WACI,cAACP,EAAD,UAAQK,IACPE,KAEL,cAACL,GAAD,UACKI,QCLET,GAJA,SAAC,GAAD,IAAGQ,EAAH,EAAGA,MAAH,OACX,6BAAKA,KCCIxB,GAAU/B,IAAO0D,KAAV,4FCMLC,GANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,cAAC,GAAD,UACKA,KCFI7B,GAAU/B,IAAOqD,IAAV,oEAKP/C,GAASN,IAAOO,OAAV,wcAGN,qBAAGpC,MAAkBC,MAAMoC,QAKf,qBAAGrC,MAAkB+B,WAAW+C,aAexC,qBAAG9E,MAAkBC,MAAMC,UCC7BwF,GA1BC,WACd,MAA4BlB,YAAY9C,GAAhCnB,EAAR,EAAQA,MAAOI,EAAf,EAAeA,SACTkC,EAAWC,cAEjB,OACE,cAAC,GAAD,UACGvC,EAAMoF,OAAS,GACd,qCACE,eAAC,GAAD,CACEjB,QAAS,kBAAM7B,EAASxB,MACxBuE,SAAUrF,EAAMsF,OAAM,qBAAGnF,QAF3B,UAGGC,EAAW,aAAU,QAHxB,qBAMA,cAAC,GAAD,CACE+D,QAAS,kBAAM7B,EAASrB,MACxBoE,SAAUrF,EAAMsF,OAAM,qBAAGnF,QAF3B,yCCMKoF,GAlBD,WAEZ,OACE,eAAC,GAAD,WACE,cAAC,GAAD,CAAQV,MAAM,qBACd,cAAC,GAAD,CACEA,MAAM,qBACNC,KAAM,cAAC,EAAD,MAER,cAAC,GAAD,CACED,MAAM,mBACNC,KAAM,cAAC,EAAD,IACNC,mBAAoB,cAAC,GAAD,UCfbS,GAFH,kBAAM,cAAC,GAAD,KCOHC,GANDC,YAAe,CACzBC,QAAS,CACL3F,MAAO4F,KCOAC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUf,MAAOA,GAAjB,SACE,eAAC,IAAD,CAAehG,MCbA,CACjBC,MAAO,CACH+G,MAAO,OACP1E,MAAO,OACPpC,OAAQ,OACRmC,KAAM,UACNiC,IAAK,UACLF,MAAO,WAGXrC,WAAY,CACR+C,UAAW,MDEb,UACE,cAAChF,EAAD,IACA,cAAC,GAAD,WAINmH,SAASC,eAAe,SAM1Bd,O","file":"static/js/main.462f6299.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    font-family: 'Lato', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    background-color: ${({ theme }) => theme.color.silver};\r\n}\r\n`","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [{\r\n            content: \"test\",\r\n            id: 1231231,\r\n            done: true,\r\n        }],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n\r\n        deleteTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload)\r\n            tasks.splice(index, 1);\r\n        },\r\n\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done\r\n        },\r\n\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n    },\r\n});\r\n\r\nexport const selectTasks = state => state.tasks;\r\nexport const {\r\n    addTask,\r\n    deleteTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n} = tasksSlice.actions;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint.maxMobile}px) {\r\n        grid-template-columns: 1fr;\r\n    };\r\n`\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    padding: 10px;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\nF\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim()\r\n\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                id: nanoid(),\r\n                done: false,\r\n            }))\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus();\r\n        }\r\n\r\n        return setNewTaskContent(\"\")\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Task = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}  \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    width: 25px;\r\n    height: 25px;\r\n\r\n    ${({ toggleTaskDone }) => toggleTaskDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { selectTasks } from \"../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { deleteTask, toggleTaskDone } from \"../tasksSlice\";\r\nimport { Wrapper, Task, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {tasks.map(task => (\r\n        <Task\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleTaskDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✓\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(deleteTask(task.id))}>\r\n            ✗\r\n          </Button>\r\n        </Task>\r\n      ))}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.white};\r\n    margin: 10px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding: 20px;\r\n    margin: 0;\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n        margin: 10px;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Wrapper } from \"./styled\"\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n   display: flex;\r\n   flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    margin: 0 20px 0 0 ;\r\n    padding: 0;\r\n    transition: filter 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import { selectTasks } from \"../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={tasks.every(({ done }) => !done)}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Tasks = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import Tasks from \"./features/tasks/Tasks.js\";\r\n\r\nconst App = () => <Tasks />\r\n\r\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    }\r\n});\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport App from './App';\r\nimport store from \"./store\";\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport { theme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        white: \"#fff\",\r\n        silver: \"#ddd\",\r\n        teal: \"#008080\",\r\n        red: \"#cc0000\",\r\n        green: \"#008000\",\r\n    },\r\n\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}