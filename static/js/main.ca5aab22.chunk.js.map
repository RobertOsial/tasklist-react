{"version":3,"sources":["GlobalStyle.js","useTasks.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","Buttons/styled.js","Buttons/index.js","App.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","silver","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","StyledForm","styled","form","breakpoint","maxMobile","Input","input","Button","button","teal","white","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","ref","value","placeholder","onChange","target","Wrapper","ul","Task","li","hidden","css","Content","span","done","toggleTaskDone","green","remove","red","Tasks","tasks","hideDone","removeTask","map","task","onClick","id","content","section","Header","header","mobileMax","Title","h2","Body","div","Section","title","body","extraHeaderContent","main","Container","children","Buttons","setAllDone","toggleHideDone","length","disabled","every","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"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","file":"static/js/main.ca5aab22.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    font-family: 'Lato', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    background-color: ${({ theme }) => theme.color.silver};\r\n}\r\n`","import { useEffect, useState } from \"react\";\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromLocalStorage\r\n        ? JSON.parse(tasksFromLocalStorage)\r\n        : [];\r\n};\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done }\r\n            }\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id))\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        addNewTask,\r\n        setAllDone,\r\n        toggleTaskDone,\r\n        removeTask,\r\n    }\r\n}; ","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:${({ theme }) => theme.breakpoint.maxMobile}px) {\r\n        grid-template-columns: 1fr;\r\n    };\r\n`\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\nF\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() !== \"\") {\r\n            addNewTask(newTaskContent.trim());\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus();\r\n        }\r\n\r\n        return setNewTaskContent(\"\")\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Task = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}  \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    width: 25px;\r\n    height: 25px;\r\n\r\n    ${({ toggleTaskDone }) => toggleTaskDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { Wrapper, Task, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <Wrapper>\r\n        {tasks.map(task => (\r\n            <Task\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggleTaskDone\r\n                    onClick={() => toggleTaskDone(task.id)}>\r\n                    {task.done ? \"✓\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}>\r\n                    ✗\r\n                </Button>\r\n            </Task>\r\n        ))}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.white};\r\n    margin: 10px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding: 20px;\r\n    margin: 0;\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n        margin: 10px;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Wrapper } from \"./styled\"\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n   display: flex;\r\n   flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    margin: 0 0 0 20px;\r\n    cursor: pointer;\r\n    transition: filter 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, setAllDone, toggleHideDone }) => (\r\n  <Wrapper>\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <Button\r\n          onClick={toggleHideDone}\r\n          disabled={tasks.every(({ done }) => !done)}>\r\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n\r\n        </Button>\r\n        <Button\r\n          onClick={setAllDone}\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n      </>\r\n    )}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Buttons;","import { useState } from \"react\";\r\nimport { useTasks } from \"./useTasks\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const {\r\n    tasks,\r\n    addNewTask,\r\n    setAllDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n  } = useTasks();\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<Tasks\r\n          tasks={tasks}\r\n          hideDone={hideDone}\r\n          removeTask={removeTask}\r\n          toggleTaskDone={toggleTaskDone}\r\n        />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            setAllDone={setAllDone}\r\n            toggleHideDone={toggleHideDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        white: \"#fff\",\r\n        silver: \"#ddd\",\r\n        teal: \"#008080\",\r\n        red: \"#cc0000\",\r\n        green: \"#008000\",\r\n    },\r\n\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}